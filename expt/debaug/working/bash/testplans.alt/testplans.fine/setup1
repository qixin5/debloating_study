# this is a common setup file created by combining the setup
# files for bash tests created by satya, praveen and srikanth
# this file should be prepended to a bash test before it can be executed

# created by praveen kallakuri
# 07/24/2001

# Note: all modifications made to the original content of the setup
#       in this file is marked with KPMOD string. 

# SETUP CREATED BY PRAVEEN

# general setup
# create an env variable which will be used by all
# tests as a temporary directory 
TESTDIR=${HOME}/tmp
mkdir -p ${TESTDIR}
CURRDIR=`pwd`
CURRPS1=${PS1}
export PS1='$'

#before going to tmp remove any tran files
rm -f `find $TESTDIR -name "tran_*"` 2>/dev/null
# waiting for any kind of background jobs to finish
wait

# setup for basic#1.1.1.test
# now=`pwd` -- this is no longer needed because we have the currdir
# variable 
rm -rf $TESTDIR/basic1 > /dev/null
mkdir -p $TESTDIR/basic1

#setup for basic 2, 3, 4
rm -f ${TESTDIR}/*tmprani> /dev/null
echo "first file" > ${TESTDIR}/tmp_1.tmprani
echo "second file" > ${TESTDIR}/tmp_2.tmprani

#setup for basic7 or space 1,2
fred="many spaces between these                  words"

#setup for basic#8.1.1.test
rm -rf ${TESTDIR}/basic8 2> /dev/null
mkdir -p ${TESTDIR}/basic8/somemorething
echo "first" > ${TESTDIR}/basic8/first.tmp
echo "second" > ${TESTDIR}/basic8/second.tmp
ln -s ${TESTDIR}/basic8/first.tmp ${TESTDIR}/basic8/tmp

#setup for basic#9.1.1.test
echo "echo this is praveen" > ${TESTDIR}/basicnine.test

#builtin#1.1.1.test
declare -i count;
declare -i continuer;
count=1; continuer=1;

#setup for enable tests
orig_path=$PATH
echo "echo haha foolod u, here is what u gave: \$@" > ${TESTDIR}/type
chmod +x ${TESTDIR}/type

#setup for getopts
dodosays ()
{
    echo processing getopts
    while getopts ":ab:c" opt; do
        case $opt in
            a ) echo dodo would process option -a with arg $OPTARG ;;
            b ) echo dodo would process option -b with arg $OPTARG ;;
            c ) echo dodo would process option -c with arg $OPTATG ;;
            * ) echo "usage: dodosays [-a] [-b barg] -c args...";;
        esac
    done
    echo "there were $OPTIND options given"
}

#setup for cd 4 onwards
#KPMOD: had to rename dodo to dodokp to avoid conflict
rm -rf ${TESTDIR}/dodokp/firstdir ${TESTDIR}/dodokp/seconddir ${TESTDIR}/dodokp/thirddir> /dev/null
mkdir -p ${TESTDIR}/dodokp/firstdir
mkdir -p ${TESTDIR}/dodokp/seconddir
mkdir -p ${TESTDIR}/dodokp/thirddir


#setup for special 2
declare -i spec2

#setup for string 3
#KPMOD: had to rename dodo to dodofkp to avoid conflict
dodofkp=thisisaverybigword

#setup for string 2
echo "echo \${@:2:3}" > ${TESTDIR}/dodo2
chmod +x ${TESTDIR}/dodo2

#setup for string 4-12
dodo4=WheneverDodoWentToSchoolDodoFoughtWithTheBullyGotABlackEye

#setup for string 13
comp ()
{
    if [ first $1 second ]; then
        echo first $2 second is true
    else
        echo first $2 second is false
    fi;
}
comp1 ()
{
    if [ $1 $3 ]; then
        echo "'$3' $2 is true"
    else
        echo "'$3' $2 is false"
    fi
}

#setup for bg, jobs, and disown. these tests have a series of background
# jobs invoked as part of their setup. because this was becoming a 
# real pain while executing other tests, i am calling the setup from 
# the individual files themselves. here i am just checking whether
# the setup files exist and whether they have execute permissions.

checkx ()
{
	target=$1;
	if [ -e ${target} ]; then
		if [ ! -x ${target} ]; then
			chmod +x ${target};
		fi;
	else
		echo "setup1: error: cannot find ${target} required by job tests"
		exit 1;
	fi;
}

checkx ${TESTS_SRC}/bgs.setup
checkx ${TESTS_SRC}/bgs.cleanup

# glob tests
expect ()
{
	echo expect "$@"
}
rm -rf ${TESTDIR}/glob-test
mkdir -p ${TESTDIR}/glob-test
# check whether we can do there
builtin cd ${TESTDIR}/glob-test || { echo $0: cannot cd to ${TESTDIR}/glob-test >&2 ; exit 1; }
touch kpa kpb kpc kpd kpabc kpabd kpabe kpbb kpbcd kpca kpcb kpdd kpde kpa-b kpaXb .kpx .kpy
mkdir bdir
mkdir a\*b
> a\*b/ooo
mkdir man
mkdir man/man1
touch man/man1/bash.1
cd ${CURRDIR}

#setup for command tests (also used by redir-2 onwards)
rm -rf ${TESTDIR}/commandtests
mkdir -p ${TESTDIR}/commandtests
cd ${TESTDIR}/commandtests
echo "first" > first.tmp
echo "second" > second.tmp
echo "third" > third.tmp
echo "fourth" >> third.tmp
cd ${CURRDIR}

# setup for ifs tests
OIFS="$IFS"
IFS=":$IFS"

# setup for commandline tests
# simply check whether these two files can be executed
checkx ${TESTS_SRC}/dollar-at.sh
checkx ${TESTS_SRC}/dollar-star.sh

# setup for function tests
function dodo5
{
    echo "dodo5 says hello again"
}

bobo ()
{
    echo "now bobo is saying hello"
}

sisi ()
{
    echo "$@"
}

# setup for loop tests
declare -i loopvar=0;
fool ()
{
case $@ in
    sisi )  echo sisi;;
    gaga | gigi )   echo gaga or gigi;;
    dodo )  echo dodo;;
    * )     echo none of these;;
esac
}

koo ()
{
case $@ in
    sisi )  echo sisi;;
    gaga | gigi )   echo gaga or gigi;;
    dodo )  echo dodo;;
    dodo )  echo dodo again;;
    * )     echo none of these;;
esac
}

#setup for more-exp tests

# the expect function used by these tests is already defined 
# above in the setup

tool_var() {
        eval $1=\"\${$1:-$2}\"
        export $1
}

KPA="aaa bbb ccc"
unset KPB

# commenting out this call because it was causing v1-v4 to dump core. 
# tool_var        KPB       ${KPB:-"$KPA"}

more-exp-error ()
{
	echo "something went wrong with more-exp setup, exiting this test"
	exit 1;
}

# commenting out this also because of the same reason as above
#if [ -z "$KPB" ]; then
#	more-exp-error
#fi;

eto_prepend() {
        eval $1=\'$2\''${'$1':+":"${'$1'}}'; export $1
}

fook=bar; export fook
eto_prepend fook baz
kpaa='aaa bbb ccc'
var=abcde
somevar=

if [ -z ${HOME} ]; then
	RESETNULLHOME=1;
	HOME=/usr/home/praveen
fi;

PP='*@*';
s1=abcdefghijkl
s2=efgh
first=${s1/$s2*/}
last=${s1##$first}

shift $#
UNAME_RELEASE=${1:-4.2MP}
RELEASE=`expr "$UNAME_RELEASE" : '[^0-9]*\([0-9]*\)'` # 4
case "$RELEASE" in
"")     RELEASE=0 ;;
*)      RELEASE=`expr "$RELEASE" + 0` ;;
esac
REL_LEVEL=`expr "$UNAME_RELEASE" : '[^0-9]*[0-9]*.\([0-9]*\)'`    # 1
REL_SUBLEVEL=`expr "$UNAME_RELEASE" : '[^0-9]*[0-9]*.[0-9]*.\([0-9]*\)'` # 2

#KPMOD: had to rename this function from b1
kpb1()
{
    kpb2 ${1+"$@"}
}


#KPMOD: had to rename this function from b2
kpb2()
{  
    recho $*
    recho $#
}

NL="\\
"
NNL="+$NL+"
unset undef
#KPMOD: had to rename this variable from yyy to avoid conflict
yyykp=""

arg=a,b,c,d,e,f
#KPMOD: had to rename this variable from z to avoid conflict
export zkp=$arg
#KPMOD: had to rename this variable from z1 to avoid conflict
eval zkp1=\"$arg\"
zz="a b c d e"
declare jkpa=$zz
#********************end of KP setup*****************
# SETUP PREPARED BY SATYA


# KPMOD: commented the next 4 lines because the function has already
# been defined above

#expect()
#{
 #       echo expect "$@"
#}

# KPMOD: setting the following variable to the default test directory
#SP_TESTDIR=$HOME/tmp
SP_TESTDIR=${TESTDIR}

#setup for new-exp.tests

export HOME_BAK=$HOME
HOME=/usr/homes/chet    # to make the check against new-exp.right work
_ENV=oops
P=*@*
foo2='abcd   '
foo=bar
z=abcdefghijklmnop
v=abcde
av=(abcd efgh ijkl mnop qrst uvwx)
#KPMOD: directory already created
#mkdir -p $SP_TESTDIR
echo this is test 2 > $SP_TESTDIR/x
unset foo1
y=abcdef
z1='abc def'
AB='abcdefghijklmnopqrstuvwxyz'
z2=123456
xx=one/two/two
yy=oneonetwo

#setup for nquote.tests

z3=$''
ZIFS=$'\n'$'\t'$' '
D=$"hello"," "$"world"
world=chet

#setup for perf-script.tests

typeset -i m2 m1 M n2 n1 N m n
typeset -i MM=5 NN=5
EMPTYLINE=:  # echo

#setup for precedence.tests

case `echo -n` in
  '') Say () { echo -n "$*" ; } ;;
   *) Say () { echo "$*\c" ; } ;;
esac

Truth () {
  Say $1;
  return 0;
}

False () {
  Say $1;
  return 1;
}
cmd1='$open $test1 && $test2 $close || $test3'
cmd2='$test1 || $open $test2 && $test3 $close'

grouping_sh=
grouping_C='( )'

test3='Say 3'

#setup for posix2.tests

TESTSHELL=${THIS_SH:-$BASH_SRC_DIR/bash-2.05}
: ${TMPDIR:=$SP_TESTDIR}
exitval=0
numtests=0

newtest()
{
    numtests=$(($numtests + 1))
}

testfail()
{
    echo "$1 test failed"
    exitval=$(($exitval + 1))
}

empty=""
names=one/good/three
a=abc_def_ghi
export a

touch $TMPDIR/conftest
cat > $TMPDIR/conftest1 << EOF
$TMPDIR/conftest2 "\$@"
EOF
cat > $TMPDIR/conftest2 << "EOF"
#! /bin/sh
echo $#
EOF
chmod +x $TMPDIR/conftest1 $TMPDIR/conftest2


#setup for read.tests

echo "A B " > $SP_TESTDIR/IN

#setup for rhs-exp.tests

selvecs='&m68kcoff_vec'

#setup for prompt.tests

\rm -rf $SP_TESTDIR/spk
mkdir -p $SP_TESTDIR/spk

#setup for tilde-tests

SHELL1=~/bash
path=/usr/ucb:/bin:~/bin:~/tmp/bin:/usr/bin
XPATH=/bin:/usr/bin:.

#setup for type.tests

dodo ()
{
        echo "This hello is coming from dodo."
}

alias dodo='echo "Hello there, hope you are having a nice time with this test."'
echo "echo \"now dodo is becoming naughty\"" > dodo
chmod +x dodo

#setup for heredoc.tests

a2=foo

#setup for env.tests

echo "export TMP_VAR=bash" > $SP_TESTDIR/something.tmp
export dodo1="I am a good boy"

#setup for exit_status.test

cd1 ()
{
        builtin cd "$@" 2>/dev/null
        es=$?
        return $es
}

#setup for myexpr.tests

let a1_myexpr=100;
let a2_myexpr=200;

#setup for test-tests

t()
{
        test "$@"
        echo $?
}

touch $SP_TESTDIR/test.setgid
chmod ug+x $SP_TESTDIR/test.setgid
chmod g+s $SP_TESTDIR/test.setgid

touch $SP_TESTDIR/test.noread
chmod a-r $SP_TESTDIR/test.noread

touch $SP_TESTDIR/test.setuid
chmod u+x $SP_TESTDIR/test.setuid      # some systems require this to turn on setuid bit
chmod u+s $SP_TESTDIR/test.setuid

touch $SP_TESTDIR/test.nowrite
chmod a-w $SP_TESTDIR/test.nowrite
#KPMOD: removing this
#echo 't -w $SP_TESTDIR/test.nowrite'

touch $SP_TESTDIR/test.exec
chmod u+x $SP_TESTDIR/test.exec

touch $SP_TESTDIR/test.noexec
chmod u-x $SP_TESTDIR/test.noexec

touch $SP_TESTDIR/test.owner

touch $SP_TESTDIR/abc
touch $SP_TESTDIR/def
ln $SP_TESTDIR/abc $SP_TESTDIR/ghi

#####setup for exp-tests

xxx=abc
yyy=def
FOO=`echo 'a b' | tr ' ' '\012'`
FOO1=`echo '^A ^B' | tr ' ' '\012'`
unset X
POSIX=/usr/posix
x=file.c
x1=posix/src/std
x2=$HOME/src/cmd
x3=/one/two/three
foo3=abc
bar=def
foo4=10
x4=foo4
y1='$'$x4
eval y2='$'$x4
x5='ab
cd'
a1="a b c d e"
declare b1=$a1

#setup for varenv.sh

a_varenv=1
b_varenv=2
c_varenv=3
d_varenv=4
e_varenv=5
f_varenv=6 g_varenv=7 h_varenv=8

#setup for array.tests

unset a_array
a_array=abcde
a_array[2]=bdef
declare -a b_array[256]
unset c_array[2]
unset c_array[*]
a_array[1]=
_ENV=/bin/true
x_array=${_ENV[(_$-=0)+(_=1)-_${-%%*i*}]}
declare -a d_array='([1]="" [2]="bdef" [5]="hello world" "test")'
declare -r c_array[100]
pass_array=/etc/passwd
ps1_array='hello'

#**************end of SATYA setup********************
# SETUP CREATED BY KARRE

# The following alias declarations are for the myalias# tests
alias quit="exit"
alias e="exit"
alias p="pine"
alias rmi="rm -i"

#KPMOD: already created
#mkdir -p $HOME/tmp
#SK_TESTDIR=$HOME/tmp
SK_TESTDIR=${TESTDIR}

# This is to restore the declared aliases after an unalias in one of myalias# tests
mkdir -p $SK_TESTDIR/myalias
if [ -e $SK_TESTDIR/myalias/temp_alias ] ; then rm -f $SK_TESTDIR/myalias/temp_alias; fi
alias -p > $SK_TESTDIR/myalias/temp_alias

# This function is for the file_attrib# tests
look ()
{
echo $3
if [ $1 $2 ]; then
        echo "dodo says yes"
else
        echo "dodo says no"
fi;
}

#The following umask setting is for both file_attrib# tests and umask tests

umask_orig=`umask`
umask 022

mkdir -p $SK_TESTDIR/file_attrib

if [ -e $SK_TESTDIR/file_attrib/sk_dodo ] ; then rm -f $SK_TESTDIR/file_attrib/sk_dodo; fi
echo "this is a test file" > $SK_TESTDIR/file_attrib/sk_dodo
if [ -e $SK_TESTDIR/file_attrib/sk_sisi ] ; then rm -f $SK_TESTDIR/file_attrib/sk_sisi; fi
echo "second file" > $SK_TESTDIR/file_attrib/sk_sisi

#The ulimit settings are for ulimit# tests
myfiles=`ulimit -n`
mystack=`ulimit -s`


# the following variables are used in vars# tests

sk_a=23
# sk_b is made readonly in one of the tests, so don't use it in other tests
sk_b=56
# sk_c is made readonly here itself so don't use sk_c in other tests
sk_c=60

#The following function is used in function# tests

sk_funct () {
local k="srikanth"
echo hello , this is sk_funct
echo before sri inside
echo $k
echo after sri inside
}


# The following declarations are for the arith# tests

declare -i sk_iv sk_jv
sk_iv=163
sk_jv=2

declare -i sk_i=1 sk_j=1 sk_x=2 sk_k=2

#******************end of KARRE setup***********************

#*************** END OF COMPLETE SETUP *********************#
#*****************TEST BEGINS BELOW ************************#
