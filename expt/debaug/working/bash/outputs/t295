declare -f False () 
{ 
    Say $1;
    return 1
}
declare -f Say () 
{ 
    echo -n "$*"
}
declare -f Truth () 
{ 
    Say $1;
    return 0
}
declare -f bobo () 
{ 
    echo "now bobo is saying hello"
}
declare -f cd1 () 
{ 
    builtin cd "$@" 2>/dev/null;
    es=$?;
    return $es
}
declare -f checkx () 
{ 
    target=$1;
    if [ -e ${target} ]; then
        if [ ! -x ${target} ]; then
            chmod +x ${target};
        fi;
    else
        echo "setup1: error: cannot find ${target} required by job tests";
        exit 1;
    fi
}
declare -f comp () 
{ 
    if [ first $1 second ]; then
        echo first $2 second is true;
    else
        echo first $2 second is false;
    fi
}
declare -f comp1 () 
{ 
    if [ $1 $3 ]; then
        echo "'$3' $2 is true";
    else
        echo "'$3' $2 is false";
    fi
}
declare -f dodo () 
{ 
    echo "This hello is coming from dodo."
}
declare -f dodo5 () 
{ 
    echo "dodo5 says hello again"
}
declare -f dodosays () 
{ 
    echo processing getopts;
    while getopts ":ab:c" opt; do
        case $opt in 
            a)
                echo dodo would process option -a with arg $OPTARG
            ;;
            b)
                echo dodo would process option -b with arg $OPTARG
            ;;
            c)
                echo dodo would process option -c with arg $OPTATG
            ;;
            *)
                echo "usage: dodosays [-a] [-b barg] -c args..."
            ;;
        esac;
    done;
    echo "there were $OPTIND options given"
}
declare -f eto_prepend () 
{ 
    eval $1=\'$2\''${'$1':+":"${'$1'}}';
    export $1
}
declare -f expect () 
{ 
    echo expect "$@"
}
declare -f fool () 
{ 
    case $@ in 
        sisi)
            echo sisi
        ;;
        gaga | gigi)
            echo gaga or gigi
        ;;
        dodo)
            echo dodo
        ;;
        *)
            echo none of these
        ;;
    esac
}
declare -f koo () 
{ 
    case $@ in 
        sisi)
            echo sisi
        ;;
        gaga | gigi)
            echo gaga or gigi
        ;;
        dodo)
            echo dodo
        ;;
        dodo)
            echo dodo again
        ;;
        *)
            echo none of these
        ;;
    esac
}
declare -f kpb1 () 
{ 
    kpb2 ${1+"$@"}
}
declare -f kpb2 () 
{ 
    recho $*;
    recho $#
}
declare -f look () 
{ 
    echo $3;
    if [ $1 $2 ]; then
        echo "dodo says yes";
    else
        echo "dodo says no";
    fi
}
declare -f more-exp-error () 
{ 
    echo "something went wrong with more-exp setup, exiting this test";
    exit 1
}
declare -f newtest () 
{ 
    numtests=$(($numtests + 1))
}
declare -f sisi () 
{ 
    echo "$@"
}
declare -f sk_funct () 
{ 
    local k="srikanth";
    echo hello , this is sk_funct;
    echo before sri inside;
    echo $k;
    echo after sri inside
}
declare -f t () 
{ 
    test "$@";
    echo $?
}
declare -f testfail () 
{ 
    echo "$1 test failed";
    exitval=$(($exitval + 1))
}
declare -f tool_var () 
{ 
    eval $1=\"\${$1:-$2}\";
    export $1
}
