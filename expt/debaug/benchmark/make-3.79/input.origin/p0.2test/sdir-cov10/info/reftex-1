This is Info file ../info/reftex, produced by Makeinfo version 1.68
from the input file reftex.texi.

INFO-DIR-SECTION Editors
START-INFO-DIR-ENTRY
* reftex: (reftex).	Support for LaTeX labels, references, and citations
                          with Emacs.
END-INFO-DIR-ENTRY

   This file documents RefTeX, a package to do labels, references and
citations for LaTeX documents with Emacs.

   This is edition 3.43 of the RefTeX User Manual for RefTeX 3.43

   Copyright (c) 1997, 1998 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derive work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: reftex,  Node: Top,  Up: (dir)

   RefTeX is a package for managing Labels, References and Citations
with GNU Emacs.

   Don't be discouraged by the size of this manual, which covers RefTeX
in great depth.  All you need to know to use RefTeX can be summarized
on a single page (*note RefTeX in a Nutshell::.).  You can go back
later to other parts of this document when needed.

* Menu:

* Introduction::                     Quick-Start information.

* Table of Contents::                A Tool to move around quickly.
* Labels and References::            Creating and referencing labels.
* Citations::                        Creating Citations.
* Viewing Cross-References::         Who references or cites what?

* RefTeXs Menu::                     The Ref menu in the menubar.
* Keybindings::                      The default keybindings.
* Faces::                            Fontification of RefTeX's buffers.
* Multifile Documents::              Document spread over many files.
* Language Support::                 How to support other languages.
* Finding Files::                    Included TeX files and BibTeX .bib files.
* AUCTeX::                           Cooperation with AUCTeX.
* Optimizations::                    When RefTeX is too slow.
* Problems and Work-Arounds::        First Aid.
* Imprint::                          Author, Web-site, Thanks

* Commands::                         Which are the available commands.
* Options::                          How to extend and configure RefTeX.
* Keymaps and Hooks::                For customization.
* Changes::                          A List of recent changes to RefTeX.

The Index

* Index::                            The full index.


Introduction

* Installation::                     How to install and activate RefTeX.
* RefTeX in a Nutshell::             A brief summary and quick guide.

Labels and References

* Creating Labels::
* Referencing Labels::
* Builtin Label Environments::       The environments RefTeX knows about.
* Defining Label Environments::        ... and environments it doesn't.
* Reference Info::                   View the label corresponding to a \ref.
* xr (LaTeX package)::               References to external documents.
* varioref (LaTeX package)::         How to create \vref instead of \ref.

Defining Label Environments

* Theorem and Axiom::                Defined with `\newenvironment'.
* Quick Equation::                   When a macro sets the label type.
* Figure Wrapper::                   When a macro argument is a label.
* Adding Magic Words::               Other words for other languages.
* Using \eqref::                     How to switch to this AMS-LaTeX macro.
* Putting it Together::              How to combine many entries.

Citations

* Creating Citations::               How to create them.
* Citation Styles::                  Natbib, Harvard, Chicago and CO.
* Citation Info::                    View the corresponding database entry.
* Chapterbib and Bibunits::          Multiple bibliographies in a Document.
* Citations Outside LaTeX::          How to make citations in Emails etc.

AUCTeX

* AUCTeX-RefTeX Interface::          How both packages work together
* Style Files::                      AUCTeX's style files can support RefTeX
* Bib-Cite::                         Hypertext reading of a document

Options, Keymaps, Hooks

* Options (Table of Contents)::
* Options (Defining Label Environments)::
* Options (Creating Labels)::
* Options (Referencing Labels)::
* Options (Creating Citations)::
* Options (Viewing Cross-References)::
* Options (Finding Files)::
* Options (Optimizations)::
* Options (Fontification)::
* Options (Misc)::


File: reftex,  Node: Introduction,  Next: Table of Contents,  Up: Top

Introduction
************

   RefTeX is a specialized package for support of labels, references,
and citations in LaTeX.  RefTeX wraps itself round 3 LaTeX macros:
`\label', `\ref', and `\cite'.  Using these macros usually requires
looking up different parts of the document and searching through BibTeX
database files.  RefTeX automates these time-consuming tasks almost
entirely.  It also provides functions to display the structure of a
document and to move around in this structure quickly.

   *Note Imprint::, for information about who to contact for help, bug
reports or suggestions.

* Menu:

* Installation::                     How to install and activate RefTeX.
* RefTeX in a Nutshell::             A brief summary and quick guide.


File: reftex,  Node: Installation,  Next: RefTeX in a Nutshell,  Up: Introduction

Installation
============

   RefTeX is bundled and pre-installed with Emacs since version 20.2.

   Users of earlier Emacs distributions (including Emacs 19) can get a
copy of the RefTeX distribution from the maintainers web-page.  *Note
Imprint::, for more information.

Environment
===========

   RefTeX needs to access all files which are part of a multifile
document, and the BibTeX database files requested by the
`\bibliography' command.  To find these files, RefTeX will require a
search path, i.e., a list of directories to check.  Normally this list
is stored in the environment variables `TEXINPUTS' and `BIBINPUTS'
which are also used by RefTeX.  However, on some systems these
variables do not contain the full search path.  If RefTeX does not work
for you because it cannot find some files, read *Note Finding Files::.

Entering RefTeX Mode
====================

   To turn RefTeX Mode on and off in a particular buffer, use `M-x
reftex-mode'.  To turn on RefTeX Mode for all LaTeX files, add the
following lines to your `.emacs' file:

     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
     (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode


File: reftex,  Node: RefTeX in a Nutshell,  Prev: Installation,  Up: Introduction

RefTeX in a Nutshell
====================

  1. Table of Contents
     Typing `C-c =' (`reftex-toc') will show a table of contents of the
     document.  From that buffer, you can jump quickly to every part of
     your document.  Press `?' to get help.

  2. Labels and References
     RefTeX distinguishes labels for different environments.  It knows
     about all standard environments (and many others), and can be
     configured to recognize any additional labeled environments you
     have defined yourself (variable `reftex-label-alist').

     Creating Labels
     Type `C-c (' (`reftex-label') to insert a label at point.  RefTeX
     will either
        - derive a label from context (default for section labels)

        - prompt for a label string (default for figures and tables) or

        - insert a simple label made of a prefix and a number (all other
          environments)

     This is configurable with the variable `reftex-insert-label-flags'.

     Referencing Labels
     To make a reference, type `C-c )' (`reftex-reference').  This
     shows an outline of the document with all labels of a certain type
     (figure, equation,...) and some label context.  Selecting a label
     inserts a `\ref{LABEL}' macro into the original buffer.

  3. Citations
     Typing `C-c [' (`reftex-citation') will let you specify a regular
     expression to search in current BibTeX database files (as
     specified in the `\bibliography' command) and pull out a list of
     matches for you to choose from.  The list is *formatted* and
     sorted.  The selected article is referenced as `\cite{KEY}' (see
     variable `reftex-cite-format').

  4. Viewing Cross-References
     When point is on the KEY argument of a cross-referencing macro
     (`\label', `\ref', `\cite', `\bibitem', `\index', and variations)
     or inside a BibTeX database entry, you can press `C-c &'
     (`reftex-view-crossref') to display corresponding locations in the
     document and associated BibTeX database files.
     When the enclosing macro is `\cite' or `\ref' and no other message
     occupies the echo area, information about the citation or label
     will automatically be displayed.

  5. Multifile Documents
     Multifile Documents are fully supported.  RefTeX provides
     cross-referencing information from all parts of the document, and
     across document borders (`xr.sty').

  6. Document Parsing
     RefTeX needs to parse the document in order to find labels and
     other information.  It does it automatically once and updates its
     list internally when `reftex-label' is used.  To enforce
     reparsing, call any of the commands described above with a raw
     `C-u' prefix, or press the `r' key in the label selection buffer
     or the table of contents buffer.

  7. Useful Settings
     To make RefTeX faster for large documents, and to integrate with
     AUCTeX, try these:
          (setq reftex-enable-partial-scans t)
          (setq reftex-save-parse-info t)
          (setq reftex-use-multiple-selection-buffers t)
          (setq reftex-plug-into-AUCTeX t)


File: reftex,  Node: Table of Contents,  Next: Labels and References,  Prev: Introduction,  Up: Top

Table of Contents
*****************

   Pressing the keys `C-c =' pops up a buffer showing the table of
contents of the document.  By default, this `*toc*' buffer shows only
the sections of a document.  Using the `l' and `c' keys you can have
all labels defined in the document and some context of the label
definition displayed as well.

   With the cursor in any of the lines denoting a location in the
document, simple key strokes will display the corresponding part in
another window, jump to that location, or perform other actions.

   Here is a list of special commands in the `*toc*' buffer.  A summary
of this information is always available by pressing `?'.

`0-9, -'
     Prefix argument.

`c'
     Toggle the display of label context in the `*toc*' buffer.  The
     default for this flag can be set with the variable
     `reftex-toc-include-context'.

`f'
     Toggle follow mode.  When follow mode is active, the other window
     will always show the location corresponding to the line in the
     `*toc*' buffer at point.  This is similar to pressing <SPC> after
     each cursor motion.  The default for this flag can be set with the
     variable `reftex-toc-follow-mode'.  Note that only context in
     files already visited is shown.  RefTeX will not visit a file just
     for follow mode.  See, however, the variable
     `reftex-revisit-to-follow'.

`g'
     Rebuild the `*toc*' buffer.  This does *not* rescan the document.

`i'
     Toggle the display of the file borders of a multifile document in
     the `*toc*' buffer.  The default for this flag can be set with the
     variable `reftex-toc-include-file-boundaries'.

`l'
     Toggle the display of labels `*toc*' buffer.  The default for this
     flag can be set with the variable `reftex-toc-include-labels'.

`n'
     Goto next entry in the table of context.

`p'
     Goto previous entry in the table of context.

`q'
     Hide the `*toc*' buffer, return to the position where `reftex-toc'
     was last called.

`Q'
     Kill the `*toc*' buffer, return to the position where `reftex-toc'
     was last called.

`r'
     Reparse the LaTeX document and rebuild the `*toc*' buffer.  When
     `reftex-enable-partial-scans' is non-nil, rescan only the file this
     location is defined in, not the entire document.

`R'
     Reparse the *entire* LaTeX document and rebuild the `*toc*' buffer.

`x'
     Switch to the `*toc*' buffer of an external document.  When the
     current document is using the `xr' package (*note xr (LaTeX
     package)::.), RefTeX will switch to one of the external documents.

`.'
     Show calling point in another window.  This is the point from where
     `reftex-toc' was last called.

`<SPC>'
     Show the corresponding location in another window.  This command
     does *not* select that other window.

`<TAB>'
     Goto the location in another window.

`<RET>'
     Go to the location and hide the `*toc*' buffer.  This will restore
     the window configuration before `reftex-toc' (`C-c =') was called.

`mouse-2'
     Clicking with mouse button 2 on a line has the same effect as
     <RET>.  See also variable `reftex-highlight-selection', *Note
     Options (Fontification)::.

   In order to define additional commands for the `*toc*' buffer, the
keymap `reftex-toc-map' may be used.

   The section macros recognized by RefTeX are all LaTeX section macros
(from `\part' to `\subsubparagraph') and the commands `\addchap' and
`\addsec' from the KOMA-Script classes.  Additional macros can be
configured with the variable `reftex-section-levels'.


File: reftex,  Node: Labels and References,  Next: Citations,  Prev: Table of Contents,  Up: Top

Labels and References
*********************

   LaTeX provides a powerful mechanism to deal with cross-references in
a document.  When writing a document, any part of it can be marked with
a label, like `\label{mark}'.  LaTeX records the current value of a
certain counter when a label is defined.  Later references to this label
(like `\ref{mark}') will produce the recorded value of the counter.

   Labels can be used to mark sections, figures, tables, equations,
footnotes, items in enumerate lists etc.  LaTeX is context sensitive in
doing this: A label defined in a figure environment automatically
records the figure counter, not the section counter.

   Several different environments can share a common counter and
therefore a common label category.  E.g.  labels in both `equation' and
`eqnarray' environments record the value of the same counter--the
equation counter.

* Menu:

* Creating Labels::
* Referencing Labels::
* Builtin Label Environments::       The environments RefTeX knows about.
* Defining Label Environments::        ... and environments it doesn't.
* Reference Info::                   View the label corresponding to a \ref.
* xr (LaTeX package)::               References to external documents.
* varioref (LaTeX package)::         How to create \vref instead of \ref.


File: reftex,  Node: Creating Labels,  Next: Referencing Labels,  Up: Labels and References

Creating Labels
===============

   In order to create a label in a LaTeX document, press `C-c ('
(`reftex-label').  Just like LaTeX, RefTeX is context sensitive and
will figure out the environment it currently is in and adapt the label
to that environment.  A label usually consists of a short prefix
indicating the type of the label and a unique mark.  RefTeX has 3
different modes to create this mark.

  1. A label can be derived from context.  This means, RefTeX takes the
     context of the label definition and constructs a label from
     that(1).  This works best for section labels, where the section
     heading is used to construct a label.  In fact, RefTeX's default
     settings use this method only for section labels.  You will be
     asked to confirm the derived label, or edit it.

  2. We may also use a simple unique number to identify a label.  This
     is mostly useful for labels where it is difficult to come up with
     a very good descriptive name.  RefTeX's default settings use this
     method for equations, enumerate items and footnotes.  The author
     of RefTeX tends to write documents with many equations and finds
     it impossible to come up with good names for each of them.  These
     simple labels are inserted without query, and are therefore very
     fast.  Good descriptive names are not really necessary as RefTeX
     will provide context to reference a label (*note Referencing
     Labels::.).

  3. The third method is to ask the user for a label.  This is most
     useful for things which are easy to describe briefly and do not
     turn up too frequently in a document.  RefTeX uses this for
     figures and tables.  Of course, one can enter the label directly
     by typing the full `\label{mark}'.  The advantage of using
     `reftex-label' anyway is that RefTeX will know that a new label
     has been defined.  It will then not be necessary to rescan the
     document in order to access this label later.

   If you want to change the way certain labels are created, check out
the variable `reftex-insert-label-flags' (*note Options (Creating
Labels)::.).

   If you are using AUCTeX to write your LaTeX documents, you can set
it up to delegate the creation of labels to RefTeX. *Note AUCTeX::, for
more information.

   ---------- Footnotes ----------

   (1) Note that the context may contain constructs which are illegal
in labels.  RefTeX will therefore strip the accent from accented
Latin-1 characters and remove everything else which is not legal in
labels.  This mechanism is safe, but may not be satisfactory for
non-western languages.  Check the following variables if you need to
change things: `reftex-translate-to-ascii-function',
`reftex-derive-label-parameters', `reftex-label-illegal-re',
`reftex-abbrev-parameters'.


File: reftex,  Node: Referencing Labels,  Next: Builtin Label Environments,  Prev: Creating Labels,  Up: Labels and References

Referencing Labels
==================

   Referencing Labels is really at the heart of RefTeX.  Press `C-c )'
in order to reference a label (reftex-reference).  This will start a
selection process and finally insert the complete `\ref{label}' into
the buffer.

   First, RefTeX will determine the label category which is required.
Often that can be figured out from context.  For example, if you write
`As shown in eq.' and the press `C-c )', RefTeX knows that an equation
label is going to be referenced.  If it cannot figure out what label
category is needed, it will query for one.

   You will then be presented with a label selection menu.  This is a
special buffer which contains an outline of the document along with all
labels of the given label category.  In addition, next to the label
there will be one line of context of the label definition, which is some
text in the buffer near the label definition.  Usually this is
sufficient to identify the label.  If you are unsure about a certain
label, pressing <SPC> will show the label definition point in another
window.

   In order to reference a label, move to cursor to the correct label
and press <RET>.
Here is a list of special commands in the selection buffer.  A summary
of this information is always available from the selection process by
pressing `?'.

`0-9,-'
     Prefix argument.

`b'
     Jump back to the position where you last left the selection buffer.
     Normally this should get you back to the last referenced label.

`c'
     Toggle the display of the one-line label definition context in the
     selection buffer.

`f'
     Toggle follow mode.  When follow mode is active, the other window
     will always display the full context of the current label.  This
     is similar to pressing <SPC> after each cursor motion.  Note that
     only context in files already visited is shown.  RefTeX will not
     visit a file just for follow mode.  See, however, the variable
     `reftex-revisit-to-follow'.

`g'
     Update the menu.  This will rebuilt the menu from the internal
     label list, but not reparse the document (see `r').

`i'
     Toggle the display of the file borders of a multifile document in
     the selection buffer.

`l'
     Use the last referenced label again.  This is equivalent to moving
     to that label and pressing <RET>.

`n'
     Go to next label.

`p'
     Go to previous label.

`q'
     Exit the selection process without inserting any reference into the
     buffer.

`r'
     Reparse the document to update the information on all labels and
     rebuild the menu.  If the variable `reftex-enable-partial-scans' is
     non-`nil' and your document is a multifile document, this will
     reparse only a part of the document (the file in which the label at
     point was defined).

`R'
     Reparse the *entire* document.

`s'
     Switch the label category.  After prompting for another label
     category, a menu for that category will be shown.

`t'
     Toggle the display of the table of contents in the selection
     buffer.

`v'
     Toggle between `\ref' and `\vref' macro for references.  The
     `\vref' macro is defined in the `varioref' LaTeX package.  With
     this key you can force RefTeX to insert a `\vref' macro.  The
     current state of this flag is displayed in the mode line of the
     selection buffer.

`x'
     Reference a label from an external document.  With the LaTeX
     package `xr' it is possible to reference labels defined in another
     document.  This key will switch to the label menu of an external
     document and let you select a label from there (*note xr: xr
     (LaTeX package).).

`.'
     Show insertion point in another window.  This is the point from
     where you called `reftex-reference'.

`<TAB>'
     Enter a label with completion.  This may also be a label which
     does not yet exist in the document.

`<SPC>'
     Show the surroundings of the definition of the current label in
     another window.  See also the `f' key.

`<RET>'
     Insert a reference to the label at point into the buffer from
     which the selection process was started.

`mouse-2'
     Clicking with mouse button 2 on a label will accept it like <RET>
     would. See also variable `reftex-highlight-selection', *Note
     Options (Misc)::.

`#'
     Toggle the display of a label counter in the selection buffer.

`%'
     Toggle the display of labels hidden in comments in the selection
     buffers.  Sometimes, you may have commented out parts of your
     document.  If these parts contain label definitions, RefTeX can
     still display and reference these labels.

`?'
     Show a summary of the available keys.

`C-c C-n'
     Goto next section heading (like outline mode).

`C-c C-p'
     Goto previous section heading (like outline mode).

   Several of these keys toggle certain settings.  The default value for
these flags can be preset by configuring the variable
`reftex-label-menu-flags' (*note Options (Referencing Labels)::.).  In
order to define additional commands for the selection process, the
keymap `reftex-select-label-map' may be used.


File: reftex,  Node: Builtin Label Environments,  Next: Defining Label Environments,  Prev: Referencing Labels,  Up: Labels and References

Builtin Label Environments
==========================

   RefTeX needs to be aware of the environments which can be referenced
with a label (i.e. which carry their own counters).  By default, RefTeX
recognizes all labeled environments and macros discussed in `The LaTeX
Companion by Goossens, Mittelbach & Samarin, Addison-Wesley 1994.'.
These are:

   - `figure', `figure*', `table', `table*', `equation', `eqnarray',
     `enumerate', the `\footnote' macro (this is the LaTeX core stuff)

   - `align', `gather', `multline', `flalign', `alignat', `xalignat',
     `xxalignat', `subequations' (from AMS-LaTeX's `amsmath.sty'
     package)

   - the `\endnote' macro (from `endnotes.sty')

   - `Beqnarray' (`fancybox.sty')

   - `floatingfig' (`floatfig.sty')

   - `longtable' (`longtable.sty')

   - `figwindow', `tabwindow' (`picinpar.sty')

   - `SCfigure', `SCtable' (`sidecap.sty')

   - `sidewaysfigure', `sidewaystable' (`rotating.sty')

   - `subfigure', `subfigure*', the `\subfigure' macro (`subfigure.sty')

   - `supertabular' (`supertab.sty')

   - `wrapfigure' (`wrapfig.sty')

   If you want to use other labeled environments, defined with
`\newtheorem', RefTeX needs to be configured to recognize them (*note
Defining Label Environments::.).


File: reftex,  Node: Defining Label Environments,  Next: Reference Info,  Prev: Builtin Label Environments,  Up: Labels and References

Defining Label Environments
===========================

   RefTeX can be configured to recognize additional labeled
environments and macros.  This is done with the variable
`reftex-label-alist' (*note Options (Defining Label Environments)::.).
If you are not familiar with Lisp, you should use the `custom' library
to configure this rather complex variable.  To do this, use

     M-x customize-variable <RET> reftex-label-alist <RET>

   Here we will discuss a few examples, in order to make things clearer.
It can also be instructive to look at the constant
`reftex-label-alist-builtin' which contains the entries for all the
builtin environments and macros (*note Builtin Label Environments::.).

* Menu:

* Theorem and Axiom::                Defined with `\newenvironment'.
* Quick Equation::                   When a macro sets the label type.
* Figure Wrapper::                   When a macro argument is a label.
* Adding Magic Words::               Other words for other languages.
* Using \eqref::                     How to switch to this AMS-LaTeX macro.
* Putting it Together::              How to combine many entries.


File: reftex,  Node: Theorem and Axiom,  Next: Quick Equation,  Up: Defining Label Environments

Theorem and Axiom Environments
------------------------------

   Suppose you are using `\newtheorem' in LaTeX in order to define two
new environments, `theorem' and `axiom'

     \newtheorem{axiom}{Axiom}
     \newtheorem{theorem}{Theorem}

to be used like this:

     \begin{axiom}
     \label{ax:first}
       ....
     \end{axiom}

   So we need to tell RefTeX that `theorem' and `axiom' are new labeled
environments which define their own label categories.  We can either
use Lisp to do this (e.g. in `.emacs') or use the custom library.  With
Lisp it would look like this

     (setq reftex-label-alist
        '(("axiom"   ?a "ax:"  "~\\ref{%s}" nil ("axiom"   "ax."))
          ("theorem" ?h "thr:" "~\\ref{%s}" t   ("theorem" "theor." "th."))))

   The type indicator characters `?a' and `?h' are used for prompts
when RefTeX queries for a label type.  `?h' was chosen for `theorem'
since `?t' is already taken by `table'.  Note that also `?s', `?f',
`?e', `?i', `?n' are already used for standard environments.

The labels for Axioms and Theorems will have the prefixes `ax:' and
`thr:', respectively.  *Note AUCTeX::, for information on how AUCTeX
can use RefTeX to automatically create labels when a new environment is
inserted into a buffer.

The `~\ref{%s}' is a format string indicating how to insert references
to these labels.

The next item indicates how to grab context of the label definition.
   - `t' means to get it from a default location (from the beginning of
     a `\macro' or after the `\begin' statement).  `t' is *not* a good
     choice for eqnarray and similar environments.

   - `nil' means to use the text right after the label definition.

   - For more complex ways of getting context, see the variable
     `reftex-label-alist' (*note Options (Defining Label
     Environments)::.).

   The strings at the end of each entry are used to guess the correct
label type from the word before point when creating a reference.  E.g.
if you write: `As we have shown in Theorem' and then press `C-c )',
RefTeX will know that you are looking for a theorem label and restrict
the menu to only these labels without even asking.

   To do the same configuration with `customize', you need to click on
the `[INS]' button twice to create two templates and fill them in like
this:

     Reftex Label Alist: [Hide]
     [INS] [DEL] Package or Detailed   : [Value Menu] Detailed:
                 Environment or \macro : [Value Menu] String: axiom
                 Type specification    : [Value Menu] Char  : a
                 Label prefix string   : [Value Menu] String: ax:
                 Label reference format: [Value Menu] String: ~\ref{%s}
                 Context method        : [Value Menu] After label
                 Magic words:
                   [INS] [DEL] String: axiom
                   [INS] [DEL] String: ax.
                   [INS]
     [INS] [DEL] Package or Detailed   : [Value Menu] Detailed:
                 Environment or \macro : [Value Menu] String: theorem
                 Type specification    : [Value Menu] Char  : h
                 Label prefix string   : [Value Menu] String: thr:
                 Label reference format: [Value Menu] String: ~\ref{%s}
                 Context method        : [Value Menu] Default position
                 Magic words:
                   [INS] [DEL] String: theorem
                   [INS] [DEL] String: theor.
                   [INS] [DEL] String: th.
                   [INS]

   Depending on how you would like the label insertion and selection for
the new environments to work, you might want to add the letters `a' and
`h' to some of the flags in the variables `reftex-insert-label-flags'
(*note Options (Creating Labels)::.)  and `reftex-label-menu-flags'
(*note Options (Referencing Labels)::.).


File: reftex,  Node: Quick Equation,  Next: Figure Wrapper,  Prev: Theorem and Axiom,  Up: Defining Label Environments

Quick Equation Macro
--------------------

   Suppose you would like to have a macro for quick equations.  It
could be defined like this:

     \newcommand{\quickeq}[1]{\begin{equation} #1 \end{equation}}

and used like this:

     Einstein's equation is \quickeq{E=mc^2 \label{eq:einstein}}.

   We need to tell RefTeX that any label defined in the argument of the
`\quickeq' is an equation label.  Here is how to do this with lisp:

     (setq reftex-label-alist '(("\\quickeq{}" ?e nil nil 1 nil)))

   The first element in this list is now the macro with empty braces as
an *image* of the macro arguments.  `?e' indicates that this is an
equation label, the different `nil' elements indicate to use the
default values for equations.  The `1' as the fifth element indicates
that the context of the label definition should be the 1st argument of
the macro.

   Here is again how this would look in the customization buffer:

     Reftex Label Alist: [Hide]
     [INS] [DEL] Package or Detailed   : [Value Menu] Detailed:
                 Environment or \macro : [Value Menu] String: \quickeq{}
                 Type specification    : [Value Menu] Char  : e
                 Label prefix string   : [Value Menu] Default
                 Label reference format: [Value Menu] Default
                 Context method        : [Value Menu] Macro arg nr: 1
                 Magic words:
                   [INS]


File: reftex,  Node: Figure Wrapper,  Next: Adding Magic Words,  Prev: Quick Equation,  Up: Defining Label Environments

Figure Wrapping Macro
---------------------

   Suppose you want to make figures not directly with the figure
environment, but with a macro like

     \newcommand{\myfig}[5][tbp]{%
       \begin{figure}[#1]
         \epsimp[#5]{#2}
         \caption{#3}
         \label{#4}
       \end{figure}}

which would be called like

     \myfig[htp]{filename}{caption text}{label}{1}

   Now we need to tell RefTeX that the 4th argument of the `\myfig'
macro *is itself* a figure label, and where to find the context.

     (setq reftex-label-alist
           '(("\\myfig[]{}{}{*}{}" ?f nil nil 3)))

   The empty pairs of brackets indicate the different arguments of the
`\myfig' macro. The `*' marks the label argument.  `?f' indicates that
this is a figure label which will be listed together with labels from
normal figure environments.  The `nil' entries for prefix and reference
format mean to use the defaults for figure labels.  The `3' for the
context method means to grab the 3rd macro argument - the caption.

   As a side effect of this configuration, `reftex-label' will now
insert the required naked label (without the `\label' macro) when point
is directly after the opening parenthesis of a `\myfig' macro argument.

   Again, here the configuration in the customization buffer:

     [INS] [DEL] Package or Detailed   : [Value Menu] Detailed:
                 Environment or \macro : [Value Menu] String: \myfig[]{}{}{*}{}
                 Type specification    : [Value Menu] Char  : f
                 Label prefix string   : [Value Menu] Default
                 Label reference format: [Value Menu] Default
                 Context method        : [Value Menu] Macro arg nr: 3
                 Magic words:
                   [INS]


File: reftex,  Node: Adding Magic Words,  Next: Using \eqref,  Prev: Figure Wrapper,  Up: Defining Label Environments

Adding Magic Words
------------------

   Sometimes you don't want to define a new label environment or macro,
but just change the information associated with a label category.
Maybe you want to add some magic words, for another language.  Changing
only the information associated with a label category is done by giving
`nil' for the environment name and then specify the items you want to
define.  Here is an example which adds German magic words to all
predefined label categories.

     (setq reftex-label-alist
       '((nil ?s nil nil nil ("Kapitel" "Kap." "Abschnitt" "Teil"))
         (nil ?e nil nil nil ("Gleichung" "Gl."))
         (nil ?t nil nil nil ("Tabelle"))
         (nil ?f nil nil nil ("Figur" "Abbildung" "Abb."))
         (nil ?n nil nil nil ("Anmerkung" "Anm."))
         (nil ?i nil nil nil ("Punkt"))))


File: reftex,  Node: Using \eqref,  Next: Putting it Together,  Prev: Adding Magic Words,  Up: Defining Label Environments

Using `\eqref'
--------------

   Another case where one only wants to change the information
associated with the label category is to change the macro which is used
for referencing the label.  When working with the AMS-LaTeX stuff, you
might prefer `\eqref' for doing equation references.  Here is how to do
this:

     (setq reftex-label-alist '((nil ?e nil "~\\eqref{%s}" nil nil)))

   RefTeX has also a predefined symbol for this special purpose.  The
following is equivalent to the line above.

     (setq reftex-label-alist '(AMSTeX))

   Note that this is automatically done by the `amsmath.el' style file
of AUCTeX (*note Style Files::.)--so if you use AUCTeX, this
configuration will not be necessary.


File: reftex,  Node: Putting it Together,  Prev: Using \eqref,  Up: Defining Label Environments

Putting it all together
-----------------------

   When you have to put several entries into `reftex-label-alist', just
put them after each other in a list, or create that many templates in
the customization buffer.  Here is a lisp example which uses several of
the entries described above:

     (setq reftex-label-alist
       '(("axiom"   ?a "ax:"  "~\\ref{%s}" nil ("axiom"   "ax."))
         ("theorem" ?h "thr:" "~\\ref{%s}" t   ("theorem" "theor." "th."))
         ("\\quickeq{}" ?e nil nil 1 nil)
         AMSTeX
         ("\\myfig[]{}{}{*}{}" ?f nil nil 3)))


File: reftex,  Node: Reference Info,  Next: xr (LaTeX package),  Prev: Defining Label Environments,  Up: Labels and References

Reference Info
==============

   When point is idle on the argument of a `\ref' macro, the echo area
will display some information about the label referenced there.  Note
that the information is only displayed if the echo area is not occupied
by a different message.

   RefTeX can also display the label definition corresponding to a
`\ref' macro, or all reference locations corresponding to a `\label'
macro.  *Note Viewing Cross-References::, for more information.


File: reftex,  Node: xr (LaTeX package),  Next: varioref (LaTeX package),  Prev: Reference Info,  Up: Labels and References

`xr': Cross-Document References
===============================

   The LaTeX package `xr' makes it possible to create references to
labels defined in external documents.  The preamble of a document using
`xr' will contain something like this:

     \usepackage{xr}
     \externaldocument[V1-]{volume1}
     \externaldocument[V3-]{volume3}

and we can make references to any labels defined in these external
documents by using the prefixes `V1-' and `V3-', respectively.

   RefTeX can be used to create such references as well.  Start the
referencing process normally, by pressing `C-c )'.  Select a label type
if necessary.  When you see the label selection buffer, pressing `x'
will switch to the label selection buffer of one of the external
documents.  You may then select a label as before and RefTeX will
insert it along with the required prefix.

   For this kind of inter-document cross-references, saving of parsing
information and the use of multiple selection buffers can mean a large
speed-up (*note Optimizations::.).


File: reftex,  Node: varioref (LaTeX package),  Prev: xr (LaTeX package),  Up: Labels and References

`varioref': Variable Page References
====================================

   `varioref' is a frequently used LaTeX package to create
cross-references with page information.  When you want to make a
reference with the `\vref' macro, just press the `v' key in the
selection buffer to toggle between the `\ref' and `\vref' (*note
Referencing Labels::.).  The mode line of the selection buffer shows
the current status of this switch.  If you find that you almost always
use `\vref', you may want to make it the default by customizing the
variable `reftex-vref-is-default'.


File: reftex,  Node: Citations,  Next: Viewing Cross-References,  Prev: Labels and References,  Up: Top

Citations
*********

   Citations in LaTeX are done with the `\cite' macro or variations of
it.  The argument of the macro is a citation key which identifies an
article or book in either a BibTeX database file or in an explicit
`thebibliography' environment in the document.  RefTeX's support for
citations helps to select the correct key quickly.

* Menu:

* Creating Citations::               How to create them.
* Citation Styles::                  Natbib, Harvard, Chicago and CO.
* Citation Info::                    View the corresponding database entry.
* Chapterbib and Bibunits::          Multiple bibliographies in a Document.
* Citations Outside LaTeX::          How to make citations in Emails etc.


File: reftex,  Node: Creating Citations,  Next: Citation Styles,  Up: Citations

Creating Citations
==================

   In order to create a citation, press `C-c ['.  RefTeX then prompts
for a regular expression which will be used to search through the
database and present the list of matches to choose from in a selection
process similar to that for selecting labels (*note Referencing
Labels::.).

   The regular expression uses an extended syntax: `&&' defines a logic
`and' for regular expressions. For example `Einstein&&Bose' will match
all articles which mention Bose-Einstein condensation, or which are
co-authored by Bose and Einstein.  When entering the regular
expression, you can complete on known citation keys.

   RefTeX prefers to use BibTeX database files specified with a
`\bibliography' macro to collect its information.  Just like BibTeX, it
will search for the specified files in the current directory and along
the path given in the environment variable `BIBINPUTS'.  If you do not
use BibTeX, but the document contains an explicit `thebibliography'
environment, RefTeX will collect its information from there.  Note that
in this case the information presented in the selection buffer will
just be a copy of relevant `\bibitem' entries, not the structured
listing available with BibTeX database files.

   In the selection buffer, the following keys provide special
commands.  A summary of this information is always available from the
selection process by pressing `?'.

`0-9,-'
     Prefix argument.

`a'
     Accept all entries in the selection buffer and create a single
     `\cite' macro referring to them.

`A'
     Accept all entries in the selection buffer and create a `\cite'
     macro for each of it.

`f'
     Toggle follow mode.  When follow mode is active, the other window
     will always display the full database entry of the current
     article.  This is equivalent to pressing <SPC> after each cursor
     motion.  With BibTeX entries, follow mode can be rather slow.

`g'
     Start over with a new regular expression.  The full database will
     be rescanned with the new expression (see also `r').

`n'
     Go to next article.

`p'
     Go to previous article.

`q'
     Exit the selection process without inserting a citation into the
     buffer.

`r'
     Refine the current selection with another regular expression.
     This will *not* rescan the entire database, but just the already
     selected entries.

`.'
     Show insertion point in another window.  This is the point from
     where you called `reftex-citation'.

`<TAB>'
     Enter a citation key with completion.  This may also be a key
     which does not yet exist.

`<SPC>'
     Show the database entry corresponding to the article at point, in
     another window.  See also the `f' key.

`<RET>'
     Insert a citation referencing the article at point into the buffer
     from which the selection process was started.

`mouse-2'
     Clicking with mouse button 2 on a citation will accept it like
     <RET> would.  See also variable `reftex-highlight-selection',
     *Note Options (Misc)::.

`?'
     Show a summary of the available keys.

   In order to define additional commands for this selection process,
the keymap `reftex-select-bib-map' may be used.


File: reftex,  Node: Citation Styles,  Next: Citation Info,  Prev: Creating Citations,  Up: Citations

Citation Styles
===============

   The standard LaTeX macro `\cite' works well with numeric or simple
key citations.  To deal with the more complex task of author-year
citations as used in many natural sciences, a variety of packages has
been developed which define derived forms of the `\cite' macro.  RefTeX
can be configured to produce these citation macros as well by setting
the variable `reftex-cite-format'.  For the most commonly used packages
(`natbib', `harvard', `chicago') this may be done from the menu, under
`Ref->Citation Styles'.  Since there are usually several macros to
create the citations, executing `reftex-citation' (`C-c [') starts by
prompting for the correct macro.  For the Natbib style, this looks like
this:

     SELECT A CITATION FORMAT
     
     [^M]   \cite{%l}
     [t]    \citet{%l}
     [T]    \citet*{%l}
     [p]    \citep{%l}
     [P]    \citep*{%l}
     [e]    \citep[e.g.][]{%l}
     [s]    \citep[see][]{%l}
     [a]    \citeauthor{%l}
     [A]    \citeauthor*{%l}
     [y]    \citeyear{%l}

   Following the most generic of these packages, `natbib', the builtin
citation packages always accept the `t' key for a *textual* citation
(like: `Jones et al. (1997) have shown...')  as well as the `p' key for
a parenthetical citation (like: `As shown earlier (Jones et al, 1997)').

   To make one of these styles the default, customize the variable
`reftex-cite-format' or put into `.emacs':

     (setq reftex-cite-format 'natbib)

   You can also use AUCTeX style files to automatically set the
citation style based on the `usepackage' commands in a given document.
*Note Style Files::, for information on how to set up the style files
correctly.


File: reftex,  Node: Citation Info,  Next: Chapterbib and Bibunits,  Prev: Citation Styles,  Up: Citations

   Top

Citation Info
=============

   When point is idle on the argument of a `\cite' macro, the echo area
will display some information about the article cited there.  Note that
the information is only displayed if the echo area is not occupied by a
different message.

   RefTeX can also display the `\bibitem' or BibTeX database entry
corresponding to a `\cite' macro, or all citation locations
corresponding to a `\bibitem' or BibTeX database entry.  *Note Viewing
Cross-References::, for more information.


File: reftex,  Node: Chapterbib and Bibunits,  Next: Citations Outside LaTeX,  Prev: Citation Info,  Up: Citations

Chapterbib and Bibunits
=======================

   `chapterbib' and `bibunits' are two LaTeX packages which produce
multiple bibliographies in a document.  This is no problem for RefTeX
as long as all bibliographies use the same BibTeX database files.  If
they do not, it is best to have each document part in a separate file
(as it is required for `chapterbib' anyway).  Then RefTeX will still
scan the locally relevant databases correctly.  If you have multiple
bibliographies within a *single file*, this may or may not be the case.


File: reftex,  Node: Citations Outside LaTeX,  Prev: Chapterbib and Bibunits,  Up: Citations

Citations outside LaTeX
=======================

   The command `reftex-citation' can also be executed outside a LaTeX
buffer.  This can be useful to reference articles in the mail buffer and
other documents.  You should *not* enter `reftex-mode' for this, just
execute the command.  The list of BibTeX files will in this case be
taken from the variable `reftex-default-bibliography'.  Setting the
variable `reftex-cite-format' to the symbol `locally' does a decent job
of putting all relevant information about a citation directly into the
buffer.  Here is the lisp code to add the `C-c [' binding to the mail
buffer.  It also provides a local binding for `reftex-cite-format'.

     (add-hook
      'mail-setup-hook
      (lambda ()
        (define-key mail-mode-map "\C-c["
          (lambda ()
            (interactive)
            (require 'reftex)
            (let ((reftex-cite-format 'locally))
              (reftex-citation))))))


File: reftex,  Node: Viewing Cross-References,  Next: RefTeXs Menu,  Prev: Citations,  Up: Top

Viewing Cross-References
************************

   RefTeX can display cross-referencing information.  This means, if
two document locations are linked, RefTeX can display the matching
location(s) in another window.  The `\label' and `\ref' macros are one
way of estabishing such a link.  Also, a `\cite' macro is linked to the
corresponding `\bibitem' macro or a BibTeX database entry.

   The feature is invoked by pressing `C-c &' (`reftex-view-crossref')
while point is on the KEY argument of a macro involved in
cross-referencing.  You can also click with `S-mouse-2' on the macro
argument.  Here is what will happen for individual classes of macros:

`\ref'
     Display the corresponding label definition.  All usual variants(1)
     of the `\ref' macro are active for cross-reference display.  This
     works also for labels defined in an external document when the
     current document refers to them through the `xr' interface (*note
     xr (LaTeX package)::.).

`\label'
     Display a document location which references this label.  Pressing
     `C-c &' several times moves through the entire document and finds
     all locations.  Not only the `\label' macro but also other macros
     with label arguments (as configured with `reftex-label-alist') are
     active for cross-reference display.

`\cite'
     Display the corresponding BibTeX database entry or `\bibitem'.
     All usual variants(2) of the `\cite' macro are active for
     cross-reference display.

`\bibitem'
     Display a document location which cites this article. Pressing
     `C-c &' several times moves through the entire document and finds
     all locations.

BibTeX
     `C-c &' is also active in BibTeX buffers.  All locations in a
     document where the database entry at point is cited will be
     displayed.  On first use, RefTeX will prompt for a buffer which
     belongs to the document you want to search.  Subsequent calls will
     use the same document, unless you break this link with a prefix
     argument to `C-c &'.

`\index'
     Display other locations in the document which are marked by the
     same index entry.  The standard `\index' macro as well as many
     variants(3) will be recognized.

   While the display of cross reference information for citations and
labels is hard-coded within RefTeX, the `\index' stuff is configured in
the variable `reftex-view-crossref-macros'.  You can customize this
variable to add other sets of macros for which the display of
cross-referencing information can be useful.

   ---------- Footnotes ----------

   (1) all macros that either start or end with `ref'

   (2) all macros that either start or end with `cite'

   (3) all macros which contain either `index' or `idx' in their name


File: reftex,  Node: RefTeXs Menu,  Next: Keybindings,  Prev: Viewing Cross-References,  Up: Top

RefTeX's Menu
=============

   RefTeX installs a `Ref' menu in the menu bar on systems which
support this.  From this menu you can access all of RefTeX's commands
and a few of its options.  There is also a `Customize' submenu which
can be used to access RefTeX's entire set of options.


File: reftex,  Node: Keybindings,  Next: Faces,  Prev: RefTeXs Menu,  Up: Top

Default Keybindings
===================

   Here is a summary of the available keybindings.

     C-c =      `reftex-toc'
     C-c (      `reftex-label'
     C-c )      `reftex-reference'
     C-c [      `reftex-citation'
     C-c &      `reftex-view-crossref'
     S-mouse-2  `reftex-mouse-view-crossref'

   Note that the `S-mouse-2' binding is only provided if this key is
not already used by some other package.  RefTeX will not override an
existing binding to `S-mouse-2'.

   The above keys were chosen to avoid interfering with AUCTeX's
settings.  Personally, I also bind some functions in the users `C-c'
map for easier access:

     C-c t    `reftex-toc'
     C-c l    `reftex-label'
     C-c r    `reftex-reference'
     C-c c    `reftex-citation'
     C-c v    `reftex-view-crossref'
     C-c s    `reftex-search-document'
     C-c g    `reftex-grep-document'

If you want to copy these as well, set in your `.emacs' file:

     (setq reftex-extra-bindings t)

   Changing and adding to RefTeX's keybindings is best done in the hook
`reftex-load-hook'.  For information on the keymaps which should be
used to add keys, see *Note Keymaps and Hooks::.

